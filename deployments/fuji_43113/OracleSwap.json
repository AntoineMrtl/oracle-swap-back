{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.0\"},\"sources\":{\"contracts/OracleSwap.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n// Example oracle AMM powered by Pyth price feeds.\\n//\\n// The contract holds a pool of two ERC-20 tokens, the BASE and the QUOTE, and allows users to swap tokens\\n// for the pair BASE/QUOTE. For example, the base could be WETH and the quote could be USDC, in which case you can\\n// buy WETH for USDC and vice versa. The pool offers to swap between the tokens at the current Pyth exchange rate for\\n// BASE/QUOTE, which is computed from the BASE/USD price feed and the QUOTE/USD price feed.\\n//\\n// This contract only implements the swap functionality. It does not implement any pool balancing logic (e.g., skewing the\\n// price to reflect an unbalanced pool) or depositing / withdrawing funds. When deployed, the contract needs to be sent\\n// some quantity of both the base and quote token in order to function properly (using the ERC20 transfer function to\\n// the contract's address).\\ncontract OracleSwap {\\n    event Transfer(address from, address to, uint amountUsd, uint amountWei);\\n\\n    IPyth pyth;\\n\\n    bytes32 baseTokenPriceId;\\n    bytes32 quoteTokenPriceId;\\n\\n    ERC20 public baseToken;\\n    ERC20 public quoteToken;\\n\\n    constructor(\\n        address _pyth,\\n        bytes32 _baseTokenPriceId,\\n        bytes32 _quoteTokenPriceId,\\n        address _baseToken,\\n        address _quoteToken\\n    ) {\\n        pyth = IPyth(_pyth);\\n        baseTokenPriceId = _baseTokenPriceId;\\n        quoteTokenPriceId = _quoteTokenPriceId;\\n        baseToken = ERC20(_baseToken);\\n        quoteToken = ERC20(_quoteToken);\\n    }\\n\\n    // Buy or sell a quantity of the base token. `size` represents the quantity of the base token with the same number\\n    // of decimals as expected by its ERC-20 implementation. If `isBuy` is true, the contract will send the caller\\n    // `size` base tokens; if false, `size` base tokens will be transferred from the caller to the contract. Some\\n    // number of quote tokens will be transferred in the opposite direction; the exact number will be determined by\\n    // the current pyth price. The transaction will fail if either the pool or the sender does not have enough of the\\n    // requisite tokens for these transfers.\\n    //\\n    // `pythUpdateData` is the binary pyth price update data (retrieved from Pyth's price\\n    // service); this data should contain a price update for both the base and quote price feeds.\\n    // See the frontend code for an example of how to retrieve this data and pass it to this function.\\n    function swap(\\n        bool isBuy,\\n        uint size,\\n        bytes[] calldata pythUpdateData\\n    ) external payable {\\n        uint updateFee = pyth.getUpdateFee(pythUpdateData);\\n        pyth.updatePriceFeeds{value: updateFee}(pythUpdateData);\\n\\n        PythStructs.Price memory currentBasePrice = pyth.getPrice(\\n            baseTokenPriceId\\n        );\\n        PythStructs.Price memory currentQuotePrice = pyth.getPrice(\\n            quoteTokenPriceId\\n        );\\n\\n        // Note: this code does all arithmetic with 18 decimal points. This approach should be fine for most\\n        // price feeds, which typically have ~8 decimals. You can check the exponent on the price feed to ensure\\n        // this doesn't lose precision.\\n        uint256 basePrice = convertToUint(currentBasePrice, 18);\\n        uint256 quotePrice = convertToUint(currentQuotePrice, 18);\\n\\n        // This computation loses precision. The infinite-precision result is between [quoteSize, quoteSize + 1]\\n        // We need to round this result in favor of the contract.\\n        uint256 quoteSize = (size * basePrice) / quotePrice;\\n\\n        // TODO: use confidence interval\\n\\n        if (isBuy) {\\n            // (Round up)\\n            quoteSize += 1;\\n\\n            quoteToken.transferFrom(msg.sender, address(this), quoteSize);\\n            baseToken.transfer(msg.sender, size);\\n        } else {\\n            baseToken.transferFrom(msg.sender, address(this), size);\\n            quoteToken.transfer(msg.sender, quoteSize);\\n        }\\n    }\\n\\n    // TODO: we should probably move something like this into the solidity sdk\\n    function convertToUint(\\n        PythStructs.Price memory price,\\n        uint8 targetDecimals\\n    ) private pure returns (uint256) {\\n        if (price.price < 0 || price.expo > 0 || price.expo < -255) {\\n            revert();\\n        }\\n\\n        uint8 priceDecimals = uint8(uint32(-1 * price.expo));\\n\\n        if (targetDecimals - priceDecimals >= 0) {\\n            return\\n                uint(uint64(price.price)) *\\n                10 ** uint32(targetDecimals - priceDecimals);\\n        } else {\\n            return\\n                uint(uint64(price.price)) /\\n                10 ** uint32(priceDecimals - targetDecimals);\\n        }\\n    }\\n\\n    // Get the number of base tokens in the pool\\n    function baseBalance() public view returns (uint256) {\\n        return baseToken.balanceOf(address(this));\\n    }\\n\\n    // Get the number of quote tokens in the pool\\n    function quoteBalance() public view returns (uint256) {\\n        return quoteToken.balanceOf(address(this));\\n    }\\n\\n    // Send all tokens in the oracle AMM pool to the caller of this method.\\n    // (This function is for demo purposes only. You wouldn't include this on a real contract.)\\n    function withdrawAll() external {\\n        baseToken.transfer(msg.sender, baseToken.balanceOf(address(this)));\\n        quoteToken.transfer(msg.sender, quoteToken.balanceOf(address(this)));\\n    }\\n\\n    // Reinitialize the parameters of this contract.\\n    // (This function is for demo purposes only. You wouldn't include this on a real contract.)\\n    function reinitialize(\\n        bytes32 _baseTokenPriceId,\\n        bytes32 _quoteTokenPriceId,\\n        address _baseToken,\\n        address _quoteToken\\n    ) external {\\n        baseTokenPriceId = _baseTokenPriceId;\\n        quoteTokenPriceId = _quoteTokenPriceId;\\n        baseToken = ERC20(_baseToken);\\n        quoteToken = ERC20(_quoteToken);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0xc58Ecd8c09dabde731143465689Cfa71a6943b45","bytecode":"0x60806040523480156200001157600080fd5b5060405162001ac938038062001ac9833981810160405281019062000037919062000140565b846000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836001819055508260028190555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505062000234565b600081519050620001238162000200565b92915050565b6000815190506200013a816200021a565b92915050565b600080600080600060a086880312156200015957600080fd5b6000620001698882890162000112565b95505060206200017c8882890162000129565b94505060406200018f8882890162000129565b9350506060620001a28882890162000112565b9250506080620001b58882890162000112565b9150509295509295909350565b6000620001cf82620001e0565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200020b81620001c2565b81146200021757600080fd5b50565b6200022581620001d6565b81146200023157600080fd5b50565b61188580620002446000396000f3fe6080604052600436106100745760003560e01c8063c55dae631161004e578063c55dae63146100ed578063d8890f9e14610118578063f1a2e84914610141578063f338f2bf1461016c5761007b565b8063217a4b701461008057806338bde791146100ab578063853828b6146100d65761007b565b3661007b57005b600080fd5b34801561008c57600080fd5b50610095610188565b6040516100a291906111d7565b60405180910390f35b3480156100b757600080fd5b506100c06101ae565b6040516100cd91906111f2565b60405180910390f35b3480156100e257600080fd5b506100eb610260565b005b3480156100f957600080fd5b50610102610516565b60405161010f91906111d7565b60405180910390f35b34801561012457600080fd5b5061013f600480360381019061013a9190610f73565b61053c565b005b34801561014d57600080fd5b506101566105d2565b60405161016391906111f2565b60405180910390f35b61018660048036038101906101819190610f07565b610684565b005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161020b919061111d565b60206040518083038186803b15801561022357600080fd5b505afa158015610237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025b9190610fff565b905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102fa919061111d565b60206040518083038186803b15801561031257600080fd5b505afa158015610326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034a9190610fff565b6040518363ffffffff1660e01b815260040161036792919061116f565b602060405180830381600087803b15801561038157600080fd5b505af1158015610395573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b99190610ede565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610454919061111d565b60206040518083038186803b15801561046c57600080fd5b505afa158015610480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a49190610fff565b6040518363ffffffff1660e01b81526004016104c192919061116f565b602060405180830381600087803b1580156104db57600080fd5b505af11580156104ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105139190610ede565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b836001819055508260028190555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161062f919061111d565b60206040518083038186803b15801561064757600080fd5b505afa15801561065b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067f9190610fff565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d47eed4584846040518363ffffffff1660e01b81526004016106e2929190611198565b60206040518083038186803b1580156106fa57600080fd5b505afa15801561070e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107329190610fff565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ef9e5e288285856040518463ffffffff1660e01b8152600401610790929190611198565b6000604051808303818588803b1580156107a957600080fd5b505af11580156107bd573d6000803e3d6000fd5b505050505060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166331d98b3f6001546040518263ffffffff1660e01b815260040161082091906111bc565b60806040518083038186803b15801561083857600080fd5b505afa15801561084c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108709190610fd6565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166331d98b3f6002546040518263ffffffff1660e01b81526004016108d091906111bc565b60806040518083038186803b1580156108e857600080fd5b505afa1580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109209190610fd6565b9050600061092f836012610c46565b9050600061093e836012610c46565b9050600081838a61094f91906115a5565b6109599190611324565b90508915610ad75760018161096e91906112ce565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016109cf93929190611138565b602060405180830381600087803b1580156109e957600080fd5b505af11580156109fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a219190610ede565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338b6040518363ffffffff1660e01b8152600401610a7f92919061116f565b602060405180830381600087803b158015610a9957600080fd5b505af1158015610aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad19190610ede565b50610c3a565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308c6040518463ffffffff1660e01b8152600401610b3693929190611138565b602060405180830381600087803b158015610b5057600080fd5b505af1158015610b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b889190610ede565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610be692919061116f565b602060405180830381600087803b158015610c0057600080fd5b505af1158015610c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c389190610ede565b505b50505050505050505050565b600080836000015160070b1280610c6457506000836040015160030b135b80610c9557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01836040015160030b125b15610c9f57600080fd5b600083604001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610cd191906114c6565b905060008184610ce191906115ff565b60ff1610610d25578083610cf591906115ff565b60ff16600a610d0491906113a8565b846000015167ffffffffffffffff16610d1d91906115a5565b915050610d5d565b8281610d3191906115ff565b60ff16600a610d4091906113a8565b846000015167ffffffffffffffff16610d599190611324565b9150505b92915050565b600081359050610d72816117ae565b92915050565b60008083601f840112610d8a57600080fd5b8235905067ffffffffffffffff811115610da357600080fd5b602083019150836020820283011115610dbb57600080fd5b9250929050565b600081359050610dd1816117c5565b92915050565b600081519050610de6816117c5565b92915050565b600081359050610dfb816117dc565b92915050565b600081519050610e10816117f3565b92915050565b600081519050610e258161180a565b92915050565b600060808284031215610e3d57600080fd5b610e47608061120d565b90506000610e5784828501610e16565b6000830152506020610e6b84828501610ec9565b6020830152506040610e7f84828501610e01565b6040830152506060610e9384828501610eb4565b60608301525092915050565b600081359050610eae81611821565b92915050565b600081519050610ec381611821565b92915050565b600081519050610ed881611838565b92915050565b600060208284031215610ef057600080fd5b6000610efe84828501610dd7565b91505092915050565b60008060008060608587031215610f1d57600080fd5b6000610f2b87828801610dc2565b9450506020610f3c87828801610e9f565b935050604085013567ffffffffffffffff811115610f5957600080fd5b610f6587828801610d78565b925092505092959194509250565b60008060008060808587031215610f8957600080fd5b6000610f9787828801610dec565b9450506020610fa887828801610dec565b9350506040610fb987828801610d63565b9250506060610fca87828801610d63565b91505092959194509250565b600060808284031215610fe857600080fd5b6000610ff684828501610e2b565b91505092915050565b60006020828403121561101157600080fd5b600061101f84828501610eb4565b91505092915050565b60006110358484846110d2565b90509392505050565b61104781611633565b82525050565b60006110598385611255565b93508360208402850161106b8461123e565b8060005b878110156110b15784840389526110868284611277565b611091868284611028565b955061109c84611248565b935060208b019a50505060018101905061106f565b50829750879450505050509392505050565b6110cc81611651565b82525050565b60006110de8385611266565b93506110eb8385846116f4565b6110f483611790565b840190509392505050565b611108816116d0565b82525050565b61111781611695565b82525050565b6000602082019050611132600083018461103e565b92915050565b600060608201905061114d600083018661103e565b61115a602083018561103e565b611167604083018461110e565b949350505050565b6000604082019050611184600083018561103e565b611191602083018461110e565b9392505050565b600060208201905081810360008301526111b381848661104d565b90509392505050565b60006020820190506111d160008301846110c3565b92915050565b60006020820190506111ec60008301846110ff565b92915050565b6000602082019050611207600083018461110e565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561123457611233611761565b5b8060405250919050565b6000819050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000808335600160200384360303811261129057600080fd5b83810192508235915060208301925067ffffffffffffffff8211156112b457600080fd5b6001820236038413156112c657600080fd5b509250929050565b60006112d982611695565b91506112e483611695565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561131957611318611703565b5b828201905092915050565b600061132f82611695565b915061133a83611695565b92508261134a57611349611732565b5b828204905092915050565b6000808291508390505b600185111561139f5780860481111561137b5761137a611703565b5b600185161561138a5780820291505b8081029050611398856117a1565b945061135f565b94509492505050565b60006113b382611695565b91506113be8361169f565b92506113eb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846113f3565b905092915050565b60008261140357600190506114bf565b8161141157600090506114bf565b8160018114611427576002811461143157611460565b60019150506114bf565b60ff84111561144357611442611703565b5b8360020a91508482111561145a57611459611703565b5b506114bf565b5060208310610133831016604e8410600b84101617156114955782820a9050838111156114905761148f611703565b5b6114bf565b6114a28484846001611355565b925090508184048111156114b9576114b8611703565b5b81810290505b9392505050565b60006114d18261165b565b91506114dc8361165b565b925082637fffffff04821160008413600084131616156114ff576114fe611703565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000000058312600084126000841316161561153c5761153b611703565b5b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000000058212600084136000841216161561157957611578611703565b5b82637fffffff058212600084126000841216161561159a57611599611703565b5b828202905092915050565b60006115b082611695565b91506115bb83611695565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156115f4576115f3611703565b5b828202905092915050565b600061160a826116c3565b9150611615836116c3565b92508282101561162857611627611703565b5b828203905092915050565b600061163e82611675565b9050919050565b60008115159050919050565b6000819050919050565b60008160030b9050919050565b60008160070b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b60006116db826116e2565b9050919050565b60006116ed82611675565b9050919050565b82818337600083830152505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b6117b781611633565b81146117c257600080fd5b50565b6117ce81611645565b81146117d957600080fd5b50565b6117e581611651565b81146117f057600080fd5b50565b6117fc8161165b565b811461180757600080fd5b50565b61181381611668565b811461181e57600080fd5b50565b61182a81611695565b811461183557600080fd5b50565b611841816116af565b811461184c57600080fd5b5056fea264697066735822122007ed57f773f4f9c9797b8f7cfcfadeae5dc863acab55b8cd989a68c80407e48b64736f6c63430008000033","deployedBytecode":"0x6080604052600436106100745760003560e01c8063c55dae631161004e578063c55dae63146100ed578063d8890f9e14610118578063f1a2e84914610141578063f338f2bf1461016c5761007b565b8063217a4b701461008057806338bde791146100ab578063853828b6146100d65761007b565b3661007b57005b600080fd5b34801561008c57600080fd5b50610095610188565b6040516100a291906111d7565b60405180910390f35b3480156100b757600080fd5b506100c06101ae565b6040516100cd91906111f2565b60405180910390f35b3480156100e257600080fd5b506100eb610260565b005b3480156100f957600080fd5b50610102610516565b60405161010f91906111d7565b60405180910390f35b34801561012457600080fd5b5061013f600480360381019061013a9190610f73565b61053c565b005b34801561014d57600080fd5b506101566105d2565b60405161016391906111f2565b60405180910390f35b61018660048036038101906101819190610f07565b610684565b005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161020b919061111d565b60206040518083038186803b15801561022357600080fd5b505afa158015610237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025b9190610fff565b905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102fa919061111d565b60206040518083038186803b15801561031257600080fd5b505afa158015610326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034a9190610fff565b6040518363ffffffff1660e01b815260040161036792919061116f565b602060405180830381600087803b15801561038157600080fd5b505af1158015610395573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b99190610ede565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610454919061111d565b60206040518083038186803b15801561046c57600080fd5b505afa158015610480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a49190610fff565b6040518363ffffffff1660e01b81526004016104c192919061116f565b602060405180830381600087803b1580156104db57600080fd5b505af11580156104ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105139190610ede565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b836001819055508260028190555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161062f919061111d565b60206040518083038186803b15801561064757600080fd5b505afa15801561065b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067f9190610fff565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d47eed4584846040518363ffffffff1660e01b81526004016106e2929190611198565b60206040518083038186803b1580156106fa57600080fd5b505afa15801561070e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107329190610fff565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ef9e5e288285856040518463ffffffff1660e01b8152600401610790929190611198565b6000604051808303818588803b1580156107a957600080fd5b505af11580156107bd573d6000803e3d6000fd5b505050505060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166331d98b3f6001546040518263ffffffff1660e01b815260040161082091906111bc565b60806040518083038186803b15801561083857600080fd5b505afa15801561084c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108709190610fd6565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166331d98b3f6002546040518263ffffffff1660e01b81526004016108d091906111bc565b60806040518083038186803b1580156108e857600080fd5b505afa1580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109209190610fd6565b9050600061092f836012610c46565b9050600061093e836012610c46565b9050600081838a61094f91906115a5565b6109599190611324565b90508915610ad75760018161096e91906112ce565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016109cf93929190611138565b602060405180830381600087803b1580156109e957600080fd5b505af11580156109fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a219190610ede565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338b6040518363ffffffff1660e01b8152600401610a7f92919061116f565b602060405180830381600087803b158015610a9957600080fd5b505af1158015610aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad19190610ede565b50610c3a565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308c6040518463ffffffff1660e01b8152600401610b3693929190611138565b602060405180830381600087803b158015610b5057600080fd5b505af1158015610b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b889190610ede565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610be692919061116f565b602060405180830381600087803b158015610c0057600080fd5b505af1158015610c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c389190610ede565b505b50505050505050505050565b600080836000015160070b1280610c6457506000836040015160030b135b80610c9557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01836040015160030b125b15610c9f57600080fd5b600083604001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610cd191906114c6565b905060008184610ce191906115ff565b60ff1610610d25578083610cf591906115ff565b60ff16600a610d0491906113a8565b846000015167ffffffffffffffff16610d1d91906115a5565b915050610d5d565b8281610d3191906115ff565b60ff16600a610d4091906113a8565b846000015167ffffffffffffffff16610d599190611324565b9150505b92915050565b600081359050610d72816117ae565b92915050565b60008083601f840112610d8a57600080fd5b8235905067ffffffffffffffff811115610da357600080fd5b602083019150836020820283011115610dbb57600080fd5b9250929050565b600081359050610dd1816117c5565b92915050565b600081519050610de6816117c5565b92915050565b600081359050610dfb816117dc565b92915050565b600081519050610e10816117f3565b92915050565b600081519050610e258161180a565b92915050565b600060808284031215610e3d57600080fd5b610e47608061120d565b90506000610e5784828501610e16565b6000830152506020610e6b84828501610ec9565b6020830152506040610e7f84828501610e01565b6040830152506060610e9384828501610eb4565b60608301525092915050565b600081359050610eae81611821565b92915050565b600081519050610ec381611821565b92915050565b600081519050610ed881611838565b92915050565b600060208284031215610ef057600080fd5b6000610efe84828501610dd7565b91505092915050565b60008060008060608587031215610f1d57600080fd5b6000610f2b87828801610dc2565b9450506020610f3c87828801610e9f565b935050604085013567ffffffffffffffff811115610f5957600080fd5b610f6587828801610d78565b925092505092959194509250565b60008060008060808587031215610f8957600080fd5b6000610f9787828801610dec565b9450506020610fa887828801610dec565b9350506040610fb987828801610d63565b9250506060610fca87828801610d63565b91505092959194509250565b600060808284031215610fe857600080fd5b6000610ff684828501610e2b565b91505092915050565b60006020828403121561101157600080fd5b600061101f84828501610eb4565b91505092915050565b60006110358484846110d2565b90509392505050565b61104781611633565b82525050565b60006110598385611255565b93508360208402850161106b8461123e565b8060005b878110156110b15784840389526110868284611277565b611091868284611028565b955061109c84611248565b935060208b019a50505060018101905061106f565b50829750879450505050509392505050565b6110cc81611651565b82525050565b60006110de8385611266565b93506110eb8385846116f4565b6110f483611790565b840190509392505050565b611108816116d0565b82525050565b61111781611695565b82525050565b6000602082019050611132600083018461103e565b92915050565b600060608201905061114d600083018661103e565b61115a602083018561103e565b611167604083018461110e565b949350505050565b6000604082019050611184600083018561103e565b611191602083018461110e565b9392505050565b600060208201905081810360008301526111b381848661104d565b90509392505050565b60006020820190506111d160008301846110c3565b92915050565b60006020820190506111ec60008301846110ff565b92915050565b6000602082019050611207600083018461110e565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561123457611233611761565b5b8060405250919050565b6000819050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000808335600160200384360303811261129057600080fd5b83810192508235915060208301925067ffffffffffffffff8211156112b457600080fd5b6001820236038413156112c657600080fd5b509250929050565b60006112d982611695565b91506112e483611695565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561131957611318611703565b5b828201905092915050565b600061132f82611695565b915061133a83611695565b92508261134a57611349611732565b5b828204905092915050565b6000808291508390505b600185111561139f5780860481111561137b5761137a611703565b5b600185161561138a5780820291505b8081029050611398856117a1565b945061135f565b94509492505050565b60006113b382611695565b91506113be8361169f565b92506113eb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846113f3565b905092915050565b60008261140357600190506114bf565b8161141157600090506114bf565b8160018114611427576002811461143157611460565b60019150506114bf565b60ff84111561144357611442611703565b5b8360020a91508482111561145a57611459611703565b5b506114bf565b5060208310610133831016604e8410600b84101617156114955782820a9050838111156114905761148f611703565b5b6114bf565b6114a28484846001611355565b925090508184048111156114b9576114b8611703565b5b81810290505b9392505050565b60006114d18261165b565b91506114dc8361165b565b925082637fffffff04821160008413600084131616156114ff576114fe611703565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000000058312600084126000841316161561153c5761153b611703565b5b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000000058212600084136000841216161561157957611578611703565b5b82637fffffff058212600084126000841216161561159a57611599611703565b5b828202905092915050565b60006115b082611695565b91506115bb83611695565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156115f4576115f3611703565b5b828202905092915050565b600061160a826116c3565b9150611615836116c3565b92508282101561162857611627611703565b5b828203905092915050565b600061163e82611675565b9050919050565b60008115159050919050565b6000819050919050565b60008160030b9050919050565b60008160070b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b60006116db826116e2565b9050919050565b60006116ed82611675565b9050919050565b82818337600083830152505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b6117b781611633565b81146117c257600080fd5b50565b6117ce81611645565b81146117d957600080fd5b50565b6117e581611651565b81146117f057600080fd5b50565b6117fc8161165b565b811461180757600080fd5b50565b61181381611668565b811461181e57600080fd5b50565b61182a81611695565b811461183557600080fd5b50565b611841816116af565b811461184c57600080fd5b5056fea264697066735822122007ed57f773f4f9c9797b8f7cfcfadeae5dc863acab55b8cd989a68c80407e48b64736f6c63430008000033","abi":[{"inputs":[{"internalType":"address","name":"_pyth","type":"address"},{"internalType":"bytes32","name":"_baseTokenPriceId","type":"bytes32"},{"internalType":"bytes32","name":"_quoteTokenPriceId","type":"bytes32"},{"internalType":"address","name":"_baseToken","type":"address"},{"internalType":"address","name":"_quoteToken","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountUsd","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountWei","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"baseBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseToken","outputs":[{"internalType":"contract ERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"quoteBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"quoteToken","outputs":[{"internalType":"contract ERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_baseTokenPriceId","type":"bytes32"},{"internalType":"bytes32","name":"_quoteTokenPriceId","type":"bytes32"},{"internalType":"address","name":"_baseToken","type":"address"},{"internalType":"address","name":"_quoteToken","type":"address"}],"name":"reinitialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"isBuy","type":"bool"},{"internalType":"uint256","name":"size","type":"uint256"},{"internalType":"bytes[]","name":"pythUpdateData","type":"bytes[]"}],"name":"swap","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"withdrawAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}]}