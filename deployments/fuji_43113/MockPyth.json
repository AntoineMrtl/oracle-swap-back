{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.0\"},\"sources\":{\"contracts/pyth/MockPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AbstractPyth.sol\\\";\\nimport \\\"./PythStructs.sol\\\";\\n\\ncontract MockPyth is AbstractPyth {\\n    mapping(bytes32 => PythStructs.PriceFeed) priceFeeds;\\n    uint64 sequenceNumber;\\n\\n    uint singleUpdateFeeInWei;\\n    uint validTimePeriod;\\n\\n    constructor(uint _validTimePeriod, uint _singleUpdateFeeInWei) {\\n        singleUpdateFeeInWei = _singleUpdateFeeInWei;\\n        validTimePeriod = _validTimePeriod;\\n    }\\n\\n    function queryPriceFeed(\\n        bytes32 id\\n    ) public view override returns (PythStructs.PriceFeed memory priceFeed) {\\n        if (priceFeeds[id].id == 0) revert(\\\"PriceFeedNotFound\\\");\\n        return priceFeeds[id];\\n    }\\n\\n    function priceFeedExists(bytes32 id) public view override returns (bool) {\\n        return (priceFeeds[id].id != 0);\\n    }\\n\\n    function getValidTimePeriod() public view override returns (uint) {\\n        return validTimePeriod;\\n    }\\n\\n    // Takes an array of encoded price feeds and stores them.\\n    // You can create this data either by calling createPriceFeedData or\\n    // by using web3.js or ethers abi utilities.\\n    function updatePriceFeeds(\\n        bytes[] calldata updateData\\n    ) public payable override {\\n        uint requiredFee = getUpdateFee(updateData);\\n        if (msg.value < requiredFee) revert(\\\"InsufficientFee\\\");\\n\\n        // Chain ID is id of the source chain that the price update comes from. Since it is just a mock contract\\n        // We set it to 1.\\n        uint16 chainId = 1;\\n\\n        for (uint i = 0; i < updateData.length; i++) {\\n            PythStructs.PriceFeed memory priceFeed = abi.decode(\\n                updateData[i],\\n                (PythStructs.PriceFeed)\\n            );\\n\\n            uint lastPublishTime = priceFeeds[priceFeed.id].price.publishTime;\\n\\n            if (lastPublishTime < priceFeed.price.publishTime) {\\n                // Price information is more recent than the existing price information.\\n                priceFeeds[priceFeed.id] = priceFeed;\\n                emit PriceFeedUpdate(\\n                    priceFeed.id,\\n                    uint64(lastPublishTime),\\n                    priceFeed.price.price,\\n                    priceFeed.price.conf\\n                );\\n            }\\n        }\\n\\n        // In the real contract, the input of this function contains multiple batches that each contain multiple prices.\\n        // This event is emitted when a batch is processed. In this mock contract we consider there is only one batch of prices.\\n        // Each batch has (chainId, sequenceNumber) as it's unique identifier. Here chainId is set to 1 and an increasing sequence number is used.\\n        emit BatchPriceFeedUpdate(chainId, sequenceNumber);\\n        sequenceNumber += 1;\\n    }\\n\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) public view override returns (uint feeAmount) {\\n        return singleUpdateFeeInWei * updateData.length;\\n    }\\n\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable override returns (PythStructs.PriceFeed[] memory feeds) {\\n        uint requiredFee = getUpdateFee(updateData);\\n        if (msg.value < requiredFee) revert(\\\"InsufficientFee\\\");\\n\\n        feeds = new PythStructs.PriceFeed[](priceIds.length);\\n\\n        for (uint i = 0; i < priceIds.length; i++) {\\n            for (uint j = 0; j < updateData.length; j++) {\\n                feeds[i] = abi.decode(updateData[j], (PythStructs.PriceFeed));\\n\\n                if (feeds[i].id == priceIds[i]) {\\n                    uint publishTime = feeds[i].price.publishTime;\\n                    if (\\n                        minPublishTime <= publishTime &&\\n                        publishTime <= maxPublishTime\\n                    ) {\\n                        break;\\n                    } else {\\n                        feeds[i].id = 0;\\n                    }\\n                }\\n            }\\n\\n            if (feeds[i].id != priceIds[i])\\n                revert(\\\"PriceFeedNotFoundWithinRange\\\");\\n        }\\n    }\\n\\n    function createPriceFeedUpdateData(\\n        bytes32 id,\\n        int64 price,\\n        uint64 conf,\\n        int32 expo,\\n        int64 emaPrice,\\n        uint64 emaConf,\\n        uint64 publishTime\\n    ) public pure returns (bytes memory priceFeedData) {\\n        PythStructs.PriceFeed memory priceFeed;\\n\\n        priceFeed.id = id;\\n\\n        priceFeed.price.price = price;\\n        priceFeed.price.conf = conf;\\n        priceFeed.price.expo = expo;\\n        priceFeed.price.publishTime = publishTime;\\n\\n        priceFeed.emaPrice.price = emaPrice;\\n        priceFeed.emaPrice.conf = emaConf;\\n        priceFeed.emaPrice.expo = expo;\\n        priceFeed.emaPrice.publishTime = publishTime;\\n\\n        priceFeedData = abi.encode(priceFeed);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/pyth/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/pyth/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/pyth/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/pyth/AbstractPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPyth.sol\\\";\\n\\nabstract contract AbstractPyth is IPyth {\\n    /// @notice Returns the price feed with given id.\\n    /// @dev Reverts if the price does not exist.\\n    /// @param id The Pyth Price Feed ID of which to fetch the PriceFeed.\\n    function queryPriceFeed(\\n        bytes32 id\\n    ) public view virtual returns (PythStructs.PriceFeed memory priceFeed);\\n\\n    /// @notice Returns true if a price feed with the given id exists.\\n    /// @param id The Pyth Price Feed ID of which to check its existence.\\n    function priceFeedExists(\\n        bytes32 id\\n    ) public view virtual returns (bool exists);\\n\\n    function getValidTimePeriod()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint validTimePeriod);\\n\\n    function getPrice(\\n        bytes32 id\\n    ) external view virtual override returns (PythStructs.Price memory price) {\\n        return getPriceNoOlderThan(id, getValidTimePeriod());\\n    }\\n\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view virtual override returns (PythStructs.Price memory price) {\\n        return getEmaPriceNoOlderThan(id, getValidTimePeriod());\\n    }\\n\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) public view virtual override returns (PythStructs.Price memory price) {\\n        PythStructs.PriceFeed memory priceFeed = queryPriceFeed(id);\\n        return priceFeed.price;\\n    }\\n\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) public view virtual override returns (PythStructs.Price memory price) {\\n        price = getPriceUnsafe(id);\\n\\n        if (diff(block.timestamp, price.publishTime) > age)\\n            revert(\\\"StalePrice\\\");\\n\\n        return price;\\n    }\\n\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) public view virtual override returns (PythStructs.Price memory price) {\\n        PythStructs.PriceFeed memory priceFeed = queryPriceFeed(id);\\n        return priceFeed.emaPrice;\\n    }\\n\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) public view virtual override returns (PythStructs.Price memory price) {\\n        price = getEmaPriceUnsafe(id);\\n\\n        if (diff(block.timestamp, price.publishTime) > age)\\n            revert(\\\"StalePrice\\\");\\n\\n        return price;\\n    }\\n\\n    function diff(uint x, uint y) internal pure returns (uint) {\\n        if (x > y) {\\n            return x - y;\\n        } else {\\n            return y - x;\\n        }\\n    }\\n\\n    // Access modifier is overridden to public to be able to call it locally.\\n    function updatePriceFeeds(\\n        bytes[] calldata updateData\\n    ) public payable virtual override;\\n\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable virtual override {\\n        if (priceIds.length != publishTimes.length)\\n            revert(\\\"InvalidArgument\\\");\\n\\n        for (uint i = 0; i < priceIds.length; i++) {\\n            if (\\n                !priceFeedExists(priceIds[i]) ||\\n                queryPriceFeed(priceIds[i]).price.publishTime < publishTimes[i]\\n            ) {\\n                updatePriceFeeds(updateData);\\n                return;\\n            }\\n        }\\n\\n        revert(\\\"NoFreshUpdate\\\");\\n    }\\n\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    )\\n        external\\n        payable\\n        virtual\\n        override\\n        returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0x028932F4fCcE473CFb7b0F16658D553274490682","bytecode":"0x60806040523480156200001157600080fd5b50604051620020f8380380620020f8833981810160405281019062000037919062000064565b80600281905550816003819055505050620000c9565b6000815190506200005e81620000af565b92915050565b600080604083850312156200007857600080fd5b600062000088858286016200004d565b92505060206200009b858286016200004d565b9150509250929050565b6000819050919050565b620000ba81620000a5565b8114620000c657600080fd5b50565b61201f80620000d96000396000f3fe6080604052600436106100dd5760003560e01c8063b5dcc9111161007f578063caaf43f111610059578063caaf43f114610316578063d47eed4514610353578063e18910a314610390578063ef9e5e28146103bb576100dd565b8063b5dcc91114610280578063b5ec0261146102bd578063b9256d28146102fa576100dd565b80639474f45b116100bb5780639474f45b1461018c57806396834ad3146101c957806396db632714610206578063a4ae35e014610243576100dd565b806331d98b3f146100e25780634716e9c51461011f578063711a2e281461014f575b600080fd5b3480156100ee57600080fd5b5061010960048036038101906101049190611558565b6103d7565b6040516101169190611bdf565b60405180910390f35b610139600480360381019061013491906114bd565b6103f7565b6040516101469190611aa4565b60405180910390f35b34801561015b57600080fd5b506101766004803603810190610171919061161f565b6107cf565b6040516101839190611bdf565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae9190611558565b610838565b6040516101c09190611bdf565b60405180910390f35b3480156101d557600080fd5b506101f060048036038101906101eb9190611558565b61085a565b6040516101fd9190611bdf565b60405180910390f35b34801561021257600080fd5b5061022d60048036038101906102289190611581565b61087c565b60405161023a9190611ae1565b60405180910390f35b34801561024f57600080fd5b5061026a6004803603810190610265919061161f565b61098e565b6040516102779190611bdf565b60405180910390f35b34801561028c57600080fd5b506102a760048036038101906102a29190611558565b6109f7565b6040516102b49190611bdf565b60405180910390f35b3480156102c957600080fd5b506102e460048036038101906102df9190611558565b610a17565b6040516102f19190611ac6565b60405180910390f35b610314600480360381019061030f9190611419565b610a3c565b005b34801561032257600080fd5b5061033d60048036038101906103389190611558565b610bf7565b60405161034a9190611bc3565b60405180910390f35b34801561035f57600080fd5b5061037a600480360381019061037591906113d4565b610d9c565b6040516103879190611c23565b60405180910390f35b34801561039c57600080fd5b506103a5610db7565b6040516103b29190611c23565b60405180910390f35b6103d560048036038101906103d091906113d4565b610dc1565b005b6103df611150565b6103f0826103eb610db7565b61098e565b9050919050565b606060006104058888610d9c565b90508034101561044a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044190611b63565b60405180910390fd5b8585905067ffffffffffffffff81111561048d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104c657816020015b6104b3611188565b8152602001906001900390816104ab5790505b50915060005b868690508110156107c35760005b898990508110156106ea5789898281811061051e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020028101906105309190611c75565b81019061053d919061165b565b848381518110610576577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508787838181106105ba577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358483815181106105fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015114156106d7576000848381518110610647577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200151606001519050808767ffffffffffffffff161115801561067d57508567ffffffffffffffff168111155b1561068857506106ea565b6000801b8584815181106106c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000018181525050505b80806106e290611ebe565b9150506104da565b50868682818110610724577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135838281518110610764577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160000151146107b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a790611b23565b60405180910390fd5b80806107bb90611ebe565b9150506104cc565b50509695505050505050565b6107d7611150565b6107e083610838565b9050816107f142836060015161111e565b1115610832576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082990611b03565b60405180910390fd5b92915050565b610840611150565b600061084b83610bf7565b90508060400151915050919050565b610862611150565b600061086d83610bf7565b90508060200151915050919050565b6060610886611188565b888160000181815250508781602001516000019060070b908160070b815250508681602001516020019067ffffffffffffffff16908167ffffffffffffffff16815250508581602001516040019060030b908160030b815250508267ffffffffffffffff16816020015160600181815250508481604001516000019060070b908160070b815250508381604001516020019067ffffffffffffffff16908167ffffffffffffffff16815250508581604001516040019060030b908160030b815250508267ffffffffffffffff1681604001516060018181525050806040516020016109719190611bc3565b604051602081830303815290604052915050979650505050505050565b610996611150565b61099f8361085a565b9050816109b042836060015161111e565b11156109f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e890611b03565b60405180910390fd5b92915050565b6109ff611150565b610a1082610a0b610db7565b6107cf565b9050919050565b60008060001b6000808481526020019081526020016000206000015414159050919050565b818190508484905014610a84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7b90611b43565b60405180910390fd5b60005b84849050811015610bb357610ada858583818110610ace577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135610a17565b1580610b8b5750828282818110610b1a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610b2f9190611685565b67ffffffffffffffff16610b81868684818110610b75577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135610bf7565b6020015160600151105b15610ba057610b9a8787610dc1565b50610bef565b8080610bab90611ebe565b915050610a87565b506040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be690611b83565b60405180910390fd5b505050505050565b610bff611188565b6000801b600080848152602001908152602001600020600001541415610c5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5190611ba3565b60405180910390fd5b60008083815260200190815260200160002060405180606001604052908160008201548152602001600182016040518060800160405290816000820160009054906101000a900460070b60070b60070b81526020016000820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160109054906101000a900460030b60030b60030b81526020016001820154815250508152602001600382016040518060800160405290816000820160009054906101000a900460070b60070b60070b81526020016000820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160109054906101000a900460030b60030b60030b8152602001600182015481525050815250509050919050565b600082829050600254610daf9190611da1565b905092915050565b6000600354905090565b6000610dcd8383610d9c565b905080341015610e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0990611b63565b60405180910390fd5b60006001905060005b8484905081101561107d576000858583818110610e61577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002810190610e739190611c75565b810190610e80919061165b565b90506000806000836000015181526020019081526020016000206001016001015490508160200151606001518110156110685781600080846000015181526020019081526020016000206000820151816000015560208201518160010160008201518160000160006101000a81548167ffffffffffffffff021916908360070b67ffffffffffffffff16021790555060208201518160000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160106101000a81548163ffffffff021916908360030b63ffffffff16021790555060608201518160010155505060408201518160030160008201518160000160006101000a81548167ffffffffffffffff021916908360070b67ffffffffffffffff16021790555060208201518160000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160106101000a81548163ffffffff021916908360030b63ffffffff16021790555060608201518160010155505090505081600001517fd06a6b7f4918494b3719217d1802786c1f5112a6c1d88fe2cfec00b4584f6aec8284602001516000015185602001516020015160405161105f93929190611c3e565b60405180910390a25b5050808061107590611ebe565b915050610e1b565b507f943f0e8a16c19895fb87cbeb1a349ed86d7f31923089dd36c1a1ed5e300f267b81600160009054906101000a900467ffffffffffffffff166040516110c5929190611bfa565b60405180910390a160018060008282829054906101000a900467ffffffffffffffff166110f29190611d63565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505050565b60008183111561113b5781836111349190611dfb565b905061114a565b82826111479190611dfb565b90505b92915050565b6040518060800160405280600060070b8152602001600067ffffffffffffffff168152602001600060030b8152602001600081525090565b6040518060600160405280600080191681526020016111a5611150565b81526020016111b2611150565b81525090565b60008083601f8401126111ca57600080fd5b8235905067ffffffffffffffff8111156111e357600080fd5b6020830191508360208202830111156111fb57600080fd5b9250929050565b60008083601f84011261121457600080fd5b8235905067ffffffffffffffff81111561122d57600080fd5b60208301915083602082028301111561124557600080fd5b9250929050565b60008083601f84011261125e57600080fd5b8235905067ffffffffffffffff81111561127757600080fd5b60208301915083602082028301111561128f57600080fd5b9250929050565b6000813590506112a581611f76565b92915050565b6000813590506112ba81611f8d565b92915050565b6000813590506112cf81611fa4565b92915050565b600061012082840312156112e857600080fd5b6112f26060611ccc565b9050600061130284828501611296565b600083015250602061131684828501611336565b60208301525060a061132a84828501611336565b60408301525092915050565b60006080828403121561134857600080fd5b6113526080611ccc565b90506000611362848285016112c0565b6000830152506020611376848285016113bf565b602083015250604061138a848285016112ab565b604083015250606061139e848285016113aa565b60608301525092915050565b6000813590506113b981611fbb565b92915050565b6000813590506113ce81611fd2565b92915050565b600080602083850312156113e757600080fd5b600083013567ffffffffffffffff81111561140157600080fd5b61140d85828601611202565b92509250509250929050565b6000806000806000806060878903121561143257600080fd5b600087013567ffffffffffffffff81111561144c57600080fd5b61145889828a01611202565b9650965050602087013567ffffffffffffffff81111561147757600080fd5b61148389828a016111b8565b9450945050604087013567ffffffffffffffff8111156114a257600080fd5b6114ae89828a0161124c565b92509250509295509295509295565b600080600080600080608087890312156114d657600080fd5b600087013567ffffffffffffffff8111156114f057600080fd5b6114fc89828a01611202565b9650965050602087013567ffffffffffffffff81111561151b57600080fd5b61152789828a016111b8565b9450945050604061153a89828a016113bf565b925050606061154b89828a016113bf565b9150509295509295509295565b60006020828403121561156a57600080fd5b600061157884828501611296565b91505092915050565b600080600080600080600060e0888a03121561159c57600080fd5b60006115aa8a828b01611296565b97505060206115bb8a828b016112c0565b96505060406115cc8a828b016113bf565b95505060606115dd8a828b016112ab565b94505060806115ee8a828b016112c0565b93505060a06115ff8a828b016113bf565b92505060c06116108a828b016113bf565b91505092959891949750929550565b6000806040838503121561163257600080fd5b600061164085828601611296565b9250506020611651858286016113aa565b9150509250929050565b6000610120828403121561166e57600080fd5b600061167c848285016112d5565b91505092915050565b60006020828403121561169757600080fd5b60006116a5848285016113bf565b91505092915050565b60006116ba8383611929565b6101208301905092915050565b60006116d282611d0d565b6116dc8185611d30565b93506116e783611cfd565b8060005b838110156117185781516116ff88826116ae565b975061170a83611d23565b9250506001810190506116eb565b5085935050505092915050565b61172e81611e2f565b82525050565b61173d81611e3b565b82525050565b600061174e82611d18565b6117588185611d41565b9350611768818560208601611e8b565b61177181611f65565b840191505092915050565b61178581611e45565b82525050565b61179481611e52565b82525050565b6117a381611e52565b82525050565b60006117b6600a83611d52565b91507f5374616c655072696365000000000000000000000000000000000000000000006000830152602082019050919050565b60006117f6601c83611d52565b91507f5072696365466565644e6f74466f756e6457697468696e52616e6765000000006000830152602082019050919050565b6000611836600f83611d52565b91507f496e76616c6964417267756d656e7400000000000000000000000000000000006000830152602082019050919050565b6000611876600f83611d52565b91507f496e73756666696369656e7446656500000000000000000000000000000000006000830152602082019050919050565b60006118b6600d83611d52565b91507f4e6f4672657368557064617465000000000000000000000000000000000000006000830152602082019050919050565b60006118f6601183611d52565b91507f5072696365466565644e6f74466f756e640000000000000000000000000000006000830152602082019050919050565b610120820160008201516119406000850182611734565b50602082015161195360208501826119af565b50604082015161196660a08501826119af565b50505050565b610120820160008201516119836000850182611734565b50602082015161199660208501826119af565b5060408201516119a960a08501826119af565b50505050565b6080820160008201516119c5600085018261178b565b5060208201516119d86020850182611a86565b5060408201516119eb604085018261177c565b5060608201516119fe6060850182611a68565b50505050565b608082016000820151611a1a600085018261178b565b506020820151611a2d6020850182611a86565b506040820151611a40604085018261177c565b506060820151611a536060850182611a68565b50505050565b611a6281611e5f565b82525050565b611a7181611e6d565b82525050565b611a8081611e6d565b82525050565b611a8f81611e77565b82525050565b611a9e81611e77565b82525050565b60006020820190508181036000830152611abe81846116c7565b905092915050565b6000602082019050611adb6000830184611725565b92915050565b60006020820190508181036000830152611afb8184611743565b905092915050565b60006020820190508181036000830152611b1c816117a9565b9050919050565b60006020820190508181036000830152611b3c816117e9565b9050919050565b60006020820190508181036000830152611b5c81611829565b9050919050565b60006020820190508181036000830152611b7c81611869565b9050919050565b60006020820190508181036000830152611b9c816118a9565b9050919050565b60006020820190508181036000830152611bbc816118e9565b9050919050565b600061012082019050611bd9600083018461196c565b92915050565b6000608082019050611bf46000830184611a04565b92915050565b6000604082019050611c0f6000830185611a59565b611c1c6020830184611a95565b9392505050565b6000602082019050611c386000830184611a77565b92915050565b6000606082019050611c536000830186611a95565b611c60602083018561179a565b611c6d6040830184611a95565b949350505050565b60008083356001602003843603038112611c8e57600080fd5b80840192508235915067ffffffffffffffff821115611cac57600080fd5b602083019250600182023603831315611cc457600080fd5b509250929050565b6000604051905081810181811067ffffffffffffffff82111715611cf357611cf2611f36565b5b8060405250919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611d6e82611e77565b9150611d7983611e77565b92508267ffffffffffffffff03821115611d9657611d95611f07565b5b828201905092915050565b6000611dac82611e6d565b9150611db783611e6d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611df057611def611f07565b5b828202905092915050565b6000611e0682611e6d565b9150611e1183611e6d565b925082821015611e2457611e23611f07565b5b828203905092915050565b60008115159050919050565b6000819050919050565b60008160030b9050919050565b60008160070b9050919050565b600061ffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b60005b83811015611ea9578082015181840152602081019050611e8e565b83811115611eb8576000848401525b50505050565b6000611ec982611e6d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611efc57611efb611f07565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b611f7f81611e3b565b8114611f8a57600080fd5b50565b611f9681611e45565b8114611fa157600080fd5b50565b611fad81611e52565b8114611fb857600080fd5b50565b611fc481611e6d565b8114611fcf57600080fd5b50565b611fdb81611e77565b8114611fe657600080fd5b5056fea2646970667358221220102a2c293431bfa8f5ca65802176a80dfab822a304f03de6a996e29584c4cfa764736f6c63430008000033","deployedBytecode":"","abi":[{"inputs":[{"internalType":"uint256","name":"_validTimePeriod","type":"uint256"},{"internalType":"uint256","name":"_singleUpdateFeeInWei","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"chainId","type":"uint16"},{"indexed":false,"internalType":"uint64","name":"sequenceNumber","type":"uint64"}],"name":"BatchPriceFeedUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"publishTime","type":"uint64"},{"indexed":false,"internalType":"int64","name":"price","type":"int64"},{"indexed":false,"internalType":"uint64","name":"conf","type":"uint64"}],"name":"PriceFeedUpdate","type":"event"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"int64","name":"emaPrice","type":"int64"},{"internalType":"uint64","name":"emaConf","type":"uint64"},{"internalType":"uint64","name":"publishTime","type":"uint64"}],"name":"createPriceFeedUpdateData","outputs":[{"internalType":"bytes","name":"priceFeedData","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getEmaPrice","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"internalType":"uint256","name":"age","type":"uint256"}],"name":"getEmaPriceNoOlderThan","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getEmaPriceUnsafe","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getPrice","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"internalType":"uint256","name":"age","type":"uint256"}],"name":"getPriceNoOlderThan","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getPriceUnsafe","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"updateData","type":"bytes[]"}],"name":"getUpdateFee","outputs":[{"internalType":"uint256","name":"feeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getValidTimePeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"updateData","type":"bytes[]"},{"internalType":"bytes32[]","name":"priceIds","type":"bytes32[]"},{"internalType":"uint64","name":"minPublishTime","type":"uint64"},{"internalType":"uint64","name":"maxPublishTime","type":"uint64"}],"name":"parsePriceFeedUpdates","outputs":[{"components":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"},{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"emaPrice","type":"tuple"}],"internalType":"struct PythStructs.PriceFeed[]","name":"feeds","type":"tuple[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"priceFeedExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"queryPriceFeed","outputs":[{"components":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"},{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"emaPrice","type":"tuple"}],"internalType":"struct PythStructs.PriceFeed","name":"priceFeed","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"updateData","type":"bytes[]"}],"name":"updatePriceFeeds","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"updateData","type":"bytes[]"},{"internalType":"bytes32[]","name":"priceIds","type":"bytes32[]"},{"internalType":"uint64[]","name":"publishTimes","type":"uint64[]"}],"name":"updatePriceFeedsIfNecessary","outputs":[],"stateMutability":"payable","type":"function"}]}